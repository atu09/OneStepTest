#import "CircularProgressBarView.h"
#import "CircularProgressBarLayer.h"

@implementation CircularProgressBarView

-(instancetype)initWithCoder:(NSCoder *)coder{
    self = [super initWithCoder:coder];
    if (self) {
        [self initView:[self frame]];
    }
    return self;
}

-(instancetype)init{
    self = [super init];
    if (self) {
        [self initView:CGRectNull];
    }
    return self;
}

-(instancetype)initWithFrame:(CGRect)frame{
    self = [super initWithFrame:frame];
    if (self) {
        [self initView:frame];
    }
    return self;
}

-(void)initView:(CGRect)frame{
    //Without setting the content scale factor the layer would be pixelated
    [self setContentScaleFactor:[[UIScreen mainScreen] scale]];
    
    //This mode forces redrawing when bounds change (e.g. bounds change in animation)
    [self setContentMode:UIViewContentModeRedraw];
    
    [self setValue:0.f];
    [self setMaxValue:100.f];
    [self setBorderPadding:1.f];
    [self setProgressAppearanceType:0];
    [self setProgressRotationAngle:0.f];
    [self setProgressStrokeColor:[UIColor orangeColor]];
    [self setProgressColor:[UIColor orangeColor]];
    [self setProgressCapType:kCGLineCapRound];
    [self setEmptyLineColor:[UIColor lightGrayColor]];
    [self setEmptyLineStrokeColor:[UIColor lightGrayColor]];
    [self setEmptyLineWidth:1.f];
    [self setProgressLineWidth:14.f];
    [self setProgressAngle:80.f];
    
}

#pragma mark - Getters and Setters for layer properties

-(void)setValue:(CGFloat)value{
    self.progressLayer.value = value;
    
    //CALayer autogenerated setter using @dynamic doesn't refresh the layer when the value is 0
    if(value == 0){
        [self.layer setNeedsDisplay];
    }
}

-(CGFloat)value{
    return self.progressLayer.value;
}

-(void)setMaxValue:(CGFloat)maxValue{
    self.progressLayer.maxValue = maxValue;
    
    //CALayer autogenerated setter using @dynamic doesn't refresh the layer when the value is 0
    if(maxValue == 0){
        [self.layer setNeedsDisplay];
    }
}

-(CGFloat)maxValue{
    return self.progressLayer.maxValue;
}

-(void)setBorderPadding:(CGFloat)borderPadding{
    self.progressLayer.borderPadding = borderPadding;
}

-(CGFloat)borderPadding{
    return self.progressLayer.borderPadding;
}

-(void)setProgressLineWidth:(CGFloat)width{
    self.progressLayer.progressLineWidth = width;
}

-(CGFloat)progressLineWidth{
    return self.progressLayer.progressLineWidth;
}

-(void)setEmptyLineWidth:(CGFloat)width{
    self.progressLayer.emptyLineWidth = width;
}

-(CGFloat)emptyLineWidth{
    return self.progressLayer.emptyLineWidth;
}

-(void)setProgressColor:(UIColor*)color{
    self.progressLayer.progressColor = color;
}

-(UIColor*)progressColor{
    return self.progressLayer.progressColor;
}

-(void)setProgressStrokeColor:(UIColor*)color{
    self.progressLayer.progressStrokeColor = color;
}

-(UIColor*)progressStrokeColor{
    return self.progressLayer.progressStrokeColor;
}

-(void)setEmptyLineColor:(UIColor *)emptyLineColor{
    self.progressLayer.emptyLineColor = emptyLineColor;
}

-(UIColor*)emptyLineColor{
    return self.progressLayer.emptyLineColor;
}

-(void)setEmptyLineStrokeColor:(UIColor *)emptyLineStrokeColor{
    self.progressLayer.emptyLineStrokeColor = emptyLineStrokeColor;
}

-(UIColor*)emptyLineStrokeColor{
    return self.progressLayer.emptyLineStrokeColor;
}

-(void)setProgressAngle:(CGFloat)progressAngle{
    self.progressLayer.progressAngle = progressAngle;
}

-(CGFloat)progressAngle{
    return self.progressLayer.progressAngle;
}

-(void)setProgressAppearanceType:(NSInteger)progressAppearanceType{
    self.progressLayer.progressAppearanceType = [self safeProgressAppearanceType:progressAppearanceType];
}

-(NSInteger)progressAppearanceType{
    return self.progressLayer.progressAppearanceType;
}

-(CircularProgressBarAppearanceType)safeProgressAppearanceType:(NSInteger)progressAppearanceType{
    if(CircularProgressBarAppearanceTypeOverlaysEmptyLine <= progressAppearanceType  && progressAppearanceType <= CircularProgressBarAppearanceTypeUnderEmptyLine){
        return (CircularProgressBarAppearanceType)progressAppearanceType;
    }
    
    return CircularProgressBarAppearanceTypeOverlaysEmptyLine;
}

-(void)setProgressRotationAngle:(CGFloat)progressRootationAngle{
    self.progressLayer.progressRotationAngle = progressRootationAngle;
}

-(CGFloat)progressRotationAngle{
    return self.progressLayer.progressRotationAngle;
}

-(void)setProgressCapType:(NSInteger)progressCapType{
    self.progressLayer.progressCapType = [self safeCapType:progressCapType];
}

-(NSInteger)progressCapType{
    return self.progressLayer.progressCapType;
}

-(void)setEmptyCapType:(NSInteger)emptyCapType{
    self.progressLayer.emptyCapType = [self safeCapType:emptyCapType];
}

-(NSInteger)emptyCapType{
    return self.progressLayer.emptyCapType;
}

-(CGLineCap)safeCapType:(NSInteger)type{
    if(kCGLineCapButt <= type && type <= kCGLineCapSquare){
        return (CGLineCap)type;
    }
    
    return kCGLineCapRound;
}

#pragma mark - CALayer

-(CircularProgressBarLayer*)progressLayer{
    CircularProgressBarLayer* layer = (CircularProgressBarLayer*) self.layer;
    return layer;
}

+ (Class) layerClass {
    return [CircularProgressBarLayer class];
}

@end
